#summary The report for our final project

=Introduction to problem=
<p>
Our project was to build a piano with the Altera Cyclone II DE2 board and Verilog HDL.  The board featured a 16x2 LCD display on which we displayed the title of a song and the keys the user had to press to play that song.  Input was provided by a connected PS/2 keyboard.  We chose to do this project because we honestly feel that not everyone has the opportunity to play a song on the piano, so we decided to bring the experience of a piano to the regular keyboard.  The four songs present in the trainer are Twinkle Twinkle Little Star, Happy Birthday, Mary Had a Little Lamb, and Jingle Bells.
</p>

=Background=
<p>
Our original project idea was to build a sequencer that would allow the user to play and record something and then listen to it and play along with it.  However given our limited time, experience, and motivation, we had the idea to make a 'guitar hero'-esque piano game.  At this point we decided that we didn't have the time to figure out and interface with the VGA and so we finally whittled our project down to the song tutor piano.
</p>
<p>
A lot of the backbone of our code came from the [http://www.johnloomis.org/digitallab/ John Loomis DE2 Project Site.]  We specifically made use of [http://www.johnloomis.org/digitallab/lcdlab/lcdlab3/lcdlab3.html lcdlab3], [http://www.johnloomis.org/digitallab/audio/audio2/audio2.html audio2], and [http://www.johnloomis.org/digitallab/ps2lab1/ps2lab1.html ps2lab1].  Once we got each of these devices working the way we wanted on their own, we had to link them all together.  And once we accomplished this, we assigned thirteen different keyboard keys (ZSXDCVGBHNJM,) to thirteen different frequencies (C4 C# D D# E F F# G G# A A# B C5) and created a piano.
</p>

=Keyboard=
<p>
When interfacing a PS/2 keyboard to the DE2 board, an 8 bit code is sent whenever a key is pressed, and each key has its own unique code.  Whenever a key was released it sent 8'hF0 followed by the pressed code for that key.  When building a piano both the press and release of a key is important, as opposed to typing where you could look at only one or the other.  Our program looked for the key codes for specific keys, and when it found one it set the frequency corresponding to that key and enabled the audio output.  When a release code 8'hF0 was found, it turned off audio playback and ignored the next 8 bit code.  We had to ignore the next code after 8'hF0 because it was the same as the pressed code for that key, and if we didn't ignore it it would act as if we had just pressed that key.
</p>

=Audio=
<p>
The John Loomis module for interfacing audio involved cycling through a lookup table of a sine wave.  By adjusting the speed at which it cycles through the lookup table we can adjust the output frequency.  This speed was controllable by what was originally a parameter in the top module of John Loomis' original code named PERIOD.  By making this period shorter we made the frequency higher. For example we assigned our C4 key which is assigned to ‘Z’ to assign the value 179 to the period. In order to calculate the period needed we found a table that showed us what our desired frequency for each note was and we found that period=48 gave us a frequency of 976 Hz by comparing the output tone to one generated by an online tone generator.  Knowing that a period of 48 gave us a frequency of 976Hz we tried doubling the period to see if it halved the frequency and it did. Using this ratio we were able to calculate the period value needed for our other frequencies.  Once we knew all the values we simply changed the parameter to a register bus and assigned values to it from the keyboard module.
</p>

|| *Note* || *Frequency (Hz)* || *Period Register Value* ||
||c4  ||  261.63       ||   179||
||C#  ||  277.18       ||   169||
||D   ||  293.66       ||   160||
||D#  ||  311.13       ||   151||
||E   ||  329.63       ||   142||
||F   ||  349.23       ||   134||
||F#  ||  369.99       ||   127||
||G   ||  392          ||   120||
||G#  ||  415.30       ||   113||
||A   ||  440          ||   107||
||A#  ||  466.16       ||   101||
||B   ||  493.88       ||   95||
||C5  ||  523.25       ||   90||


=Visual Display=
<p>
For interfacing the visual display we referenced a John Loomis project that showed that the visual display had two lines that we could write letters and numbers into which responded to certain codes. We had a large case statement that we used to change a letter in one of the rows. We wanted to change the letter every time the correct note was played to the correct note. In the case we had three inputs for each case that we had to examine. The 4 bits from hex1 and 4 bits from hex2 are the two values that are assigned to a letter. We also wanted an expected code input that would make it so that the note desired only changed when the user played the right note.
</p>

=Conclusion=

<p>The main purpose of our project was to teach people how to play the twinkle twinkle little star song with just a few computer hardware and Verilog code.  This was a fun project that required a great understanding in hardware design.  Our advice for people who might like to replicate is to break the project down into little sub projects. Integrating the keyboard with DE2 board and then adding the sound frequencies to the respective keys.
</p>

=What we could improve on=

<p>If we had more time it would be nice to add other octaves to the keyboard. We could do this by having a switch on the DE2 board that changes the frequencies played when the keys on the PS2 keyboard are pressed. Another idea would be to add chords to the piano. In order to do this we were thinking about having an individual frequency rotate really fast (every clock cycle) in between the notes in the chord. To do this it seems like we would need to assign letters outside of the keyboard we already have in order to play the chords. For example we could put "1" as a G chord and so on. Lastly we could add more songs to the project very easily, it's just figuring out what keys to press and re creating the songs takes time that we didn't have. So there are some possible extensions any future re-creators of this project can do pretty easily.
</p>